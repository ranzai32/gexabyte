const { ethers } = require('ethers');
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ—Ö –∂–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç—è—Ö, —á—Ç–æ –∏ –≤ autoManageService.js
// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∏–∑ src/scripts/ -> –≤ src/ -> –∏ –∑–∞—Ç–µ–º –≤ –∫–æ—Ä–µ–Ω—å backend/
const { provider, UNISWAP_V3_NFT_POSITION_MANAGER_ADDRESS } = require('../config');
// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∏–∑ src/scripts/ -> –≤ src/
const { INonfungiblePositionManagerABI } = require('../uniswapPositionUtils');
const { getTokenDetailsByAddressOnBackend } = require('../constants/predefinedTokens');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π NFT-–ø–æ–∑–∏—Ü–∏–∏ Uniswap V3.
 * @param {string | number} tokenId ID —Ç–æ–∫–µ–Ω–∞ NFT-–ø–æ–∑–∏—Ü–∏–∏.
 */
async function checkAccumulatedFees(tokenId) {
    if (!tokenId) {
        console.error("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω ID —Ç–æ–∫–µ–Ω–∞ (tokenId).");
        console.log("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: node scripts/checkFees.js 123456");
        return;
    }

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è NFT-–ø–æ–∑–∏—Ü–∏–∏ #${tokenId}...`);

    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
        const positionManager = new ethers.Contract(
            UNISWAP_V3_NFT_POSITION_MANAGER_ADDRESS,
            INonfungiblePositionManagerABI,
            provider // –ò—Å–ø–æ–ª—å–∑—É–µ–º provider, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ read-only –æ–ø–µ—Ä–∞—Ü–∏—è
        );

        // --- –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏, –≤–∫–ª—é—á–∞—è –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ ---
        const positionInfo = await positionManager.positions(tokenId);
        if (positionInfo.liquidity === 0n && positionInfo.fee.toString() === '0') {
            const owner = await positionManager.ownerOf(tokenId).catch(() => null);
            if (!owner) {
                 console.warn(`‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è #${tokenId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —Å–æ–∂–∂–µ–Ω–∞.`);
                 return;
            }
        }
        
        const token0Address = positionInfo.token0;
        const token1Address = positionInfo.token1;

        console.log(`   - –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ 0: ${token0Address}`);
        console.log(`   - –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ 1: ${token1Address}`);

        // --- –®–∞–≥ 2: –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–º–∏—Å—Å–∏–π —á–µ—Ä–µ–∑ staticCall ---
        // staticCall —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –µ–µ –≤ –±–ª–æ–∫—á–µ–π–Ω.
        // –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è read-only –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        const MAX_UINT128 = (2n ** 128n) - 1n;

        const feeAmounts = await positionManager.collect.staticCall({
            tokenId: tokenId,
            recipient: ethers.ZeroAddress, // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –≤–∞–∂–µ–Ω –¥–ª—è staticCall
            amount0Max: MAX_UINT128,      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            amount1Max: MAX_UINT128       // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        });

        const amount0Fees = feeAmounts.amount0;
        const amount1Fees = feeAmounts.amount1;
        
        // --- –®–∞–≥ 3: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
        const token0Details = await getTokenDetailsByAddressOnBackend(token0Address);
        const token1Details = await getTokenDetailsByAddressOnBackend(token1Address);

        if (!token0Details || !token1Details) {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Å–∏–º–≤–æ–ª, –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ) –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤.");
            // –í—ã–≤–æ–¥–∏–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –¥–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            console.log(`\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ):`);
            console.log(`   - –ö–æ–º–∏—Å—Å–∏–∏ –≤ —Ç–æ–∫–µ–Ω–µ 0: ${amount0Fees.toString()} (wei)`);
            console.log(`   - –ö–æ–º–∏—Å—Å–∏–∏ –≤ —Ç–æ–∫–µ–Ω–µ 1: ${amount1Fees.toString()} (wei)`);
            return;
        }

        const formattedAmount0 = ethers.formatUnits(amount0Fees, token0Details.decimals);
        const formattedAmount1 = ethers.formatUnits(amount1Fees, token1Details.decimals);
        
        console.log(`\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
        console.log(`   - –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –≤ ${token0Details.symbol}: ${formattedAmount0}`);
        console.log(`   - –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –≤ ${token1Details.symbol}: ${formattedAmount1}`);
        console.log(`\n   (–°—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${amount0Fees.toString()} –¥–ª—è ${token0Details.symbol}, ${amount1Fees.toString()} –¥–ª—è ${token1Details.symbol})`);

    } catch (error) {
        if (error.message.includes('Invalid token ID')) {
             console.error(`\n‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω—ã–π ID —Ç–æ–∫–µ–Ω–∞ #${tokenId} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
        } else {
             console.error(`\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è #${tokenId}:`, error);
        }
    }
}

// –ü–æ–ª—É—á–∞–µ–º tokenId –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const tokenIdFromArgs = process.argv[2];
checkAccumulatedFees(tokenIdFromArgs);