const { provider, wallet, TokenA, TokenB } = require('./config'); // wallet –Ω—É–∂–µ–Ω –¥–ª—è withdrawFullLiquidity
const { getPoolData } = require('./uniswapPoolUtils');
const { getPositionDetails, withdrawFullLiquidity } = require('./uniswapPositionUtils');

let isRebalancing = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏

async function monitorPositionAndPool(tokenId, poolTokenA, poolTokenB, poolFeeTier, walletSigner) {
    if (isRebalancing) {
        console.log(`  –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${tokenId}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.`);
        return;
    }
    console.log(`\n--- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ ${tokenId} –∏ –ø—É–ª–∞ ${poolTokenA.symbol}/${poolTokenB.symbol} (Fee: ${poolFeeTier/10000}%) ---`);
    try {
        const positionDetails = await getPositionDetails(tokenId, walletSigner); // –ò—Å–ø–æ–ª—å–∑—É–µ–º walletSigner (–∏–ª–∏ provider, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞–µ–º)
        if (!positionDetails) {
            console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ${tokenId}.`);
            return;
        }
        const { tickLower: positionTickLower, tickUpper: positionTickUpper, liquidity: positionLiquidity } = positionDetails;
        if (positionLiquidity === 0n) {
            console.log(`–ü–æ–∑–∏—Ü–∏—è ${tokenId} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.`);
            return;
        }
        console.log(`  –î–∏–∞–ø–∞–∑–æ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –ø–æ–∑–∏—Ü–∏–∏ ${tokenId}: TickLower=${positionTickLower.toString()}, TickUpper=${positionTickUpper.toString()}`);
        const currentPool = await getPoolData(poolTokenA, poolTokenB, poolFeeTier);
        if (!currentPool) {
            console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞.");
            return;
        }
        const currentPoolTick = currentPool.tickCurrent;
        console.log(`  –¢–µ–∫—É—â–∏–π —Ç–∏–∫ –ø—É–ª–∞: ${currentPoolTick}`);
        let priceOutOfRange = false;
        if (currentPoolTick < Number(positionTickLower)) {
            console.log(`  üî¥ –°–¢–ê–¢–£–°: –¶–µ–Ω–∞ –ù–ò–ñ–ï –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏! (Pool: ${currentPoolTick} < PositionLower: ${positionTickLower})`);
            priceOutOfRange = true;
        } else if (currentPoolTick > Number(positionTickUpper)) {
            console.log(`  üî¥ –°–¢–ê–¢–£–°: –¶–µ–Ω–∞ –í–´–®–ï –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏! (Pool: ${currentPoolTick} > PositionUpper: ${positionTickUpper})`);
            priceOutOfRange = true;
        } else {
            console.log(`  üü¢ –°–¢–ê–¢–£–°: –¶–µ–Ω–∞ –í–ù–£–¢–†–ò –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏. (PositionLower: ${positionTickLower} <= Pool: ${currentPoolTick} <= PositionUpper: ${positionTickUpper})`);
        }

        if (priceOutOfRange && !isRebalancing) {
            isRebalancing = true; 
            console.log(`!!! –ê–í–¢–û–£–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∏–∑—ä—è—Ç–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è Token ID: ${tokenId} !!!`);
            const withdrawalSuccess = await withdrawFullLiquidity(tokenId, walletSigner); 
            if (withdrawalSuccess) {
                console.log(`  –ê–≤—Ç–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–ª—è ${tokenId} —É—Å–ø–µ—à–Ω–æ –∏–∑—ä—è—Ç–∞.`);
                console.log("  –ê–≤—Ç–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ (–æ–±–º–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ) –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.");
                // –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: isRebalancing = false; –ø–æ—Å–ª–µ –≤—Å–µ—Ö —à–∞–≥–æ–≤.
                // –¢–∞–∫ –∫–∞–∫ –ø–æ–∑–∏—Ü–∏—è —Å–æ–∂–∂–µ–Ω–∞, –¥–∞–ª—å–Ω–µ–π—à–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ç–æ–≥–æ tokenId –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π.
            } else {
                console.error(`  –ê–≤—Ç–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—ä—è—Ç–∏–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è ${tokenId}.`);
                isRebalancing = false; 
            }
        }
    } catch (error) {
        console.error("  –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", error.message);
        isRebalancing = false; 
    }
}

function startMonitoring(tokenId, poolTokenA, poolTokenB, poolFeeTier, walletSigner, intervalMs) {
    console.log(`\n–ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è Token ID ${tokenId} –∫–∞–∂–¥—ã–µ ${intervalMs / 1000} —Å–µ–∫—É–Ω–¥...`);
    console.log("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.");
    
    monitorPositionAndPool(tokenId, poolTokenA, poolTokenB, poolFeeTier, walletSigner); // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
    
    const intervalId = setInterval(async () => {
        await monitorPositionAndPool(tokenId, poolTokenA, poolTokenB, poolFeeTier, walletSigner);
    }, intervalMs);
    return intervalId; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
}


module.exports = {
    startMonitoring,
    // monitorPositionAndPool // –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑—ã–≤–∞—Ç—å –µ–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ app.js
};